// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
    // zx -- zero x input
    Mux16(a[0..15] = x[0..15], b[0..15] = false, sel = zx, out[0..15] = zeroX);
    
    // zy -- zero y input
    Mux16(a[0..15] = y[0..15], b[0..15] = false, sel = zy, out[0..15] = zeroY);
    
    // nx -- negate x input -- flip all the bits of x and add 1 to the result
    Not16(in[0..15] = zeroX, out = notX);
    Mux16(a[0..15] = zeroX, b[0..15] = notX, sel = nx, out[0..15] = pastNotX);
    // Inc16(in[0..15] = notX, out[0..15] = negX);
    
    // ny -- negate y input -- flip all the bits of y and add 1 to the result
    Not16(in[0..15] = zeroY, out = notY);
    Mux16(a[0..15] = zeroY, b[0..15] = notY, sel = ny, out[0..15] = pastNotY);
    // Inc16(in[0..15] = notY, out[0..15] = negY);
    
    // f -- if (f==1)  set out = x + y  // integer 2's complement addition
    // f -- if (f==0)  set out = x & y  // bitwise "and"
    Add16(a[0..15] = pastNotX, b[0..15] = pastNotY, out[0..15] = AddXY);
    And16(a[0..15] = pastNotX, b[0..15] = pastNotY, out[0..15] = AndXY);
    Mux16(a[0..15] = AndXY, b[0..15] = AddXY, sel = f, out[0..15] = fXY);
    
    // if (no==1) set out = ~out   // bitwise "not"
    Not16(in[0..15] = fXY, out[0..15] = notfXY);
    Mux16(a[0..15] = fXY, b[0..15] = notfXY, sel = no, out[0..15] = out, out[15] = out0, out[0..7] = out1, out[8..15] = out2);
    
    // if (out==0) set zr = 1
    Or8Way(in[0..7] = out1, out = or1);
    Or8Way(in[0..7] = out2, out = or2);
    Or(a = or1, b = or2, out = notZr);
    
    Not(in = notZr, out = zr);    
    
    // if (out<0) set ng = 1
    And(a = out0, b = true, out = ng);   
}